package com.kkl.kklplus.b2b.viomi.service;

import com.google.common.collect.Lists;
import com.kkl.kklplus.b2b.viomi.entity.*;
import com.kkl.kklplus.b2b.viomi.http.request.*;
import com.kkl.kklplus.b2b.viomi.http.command.OperationCommand;
import com.kkl.kklplus.b2b.viomi.http.response.ResponseBody;
import com.kkl.kklplus.b2b.viomi.http.utils.OkHttpUtils;
import com.kkl.kklplus.b2b.viomi.mapper.VioMiOrderHandleMapper;
import com.kkl.kklplus.b2b.viomi.utils.GsonUtils;
import com.kkl.kklplus.b2b.viomi.utils.QuarterUtils;
import com.kkl.kklplus.common.exception.MSErrorCode;
import com.kkl.kklplus.common.response.MSResponse;
import com.kkl.kklplus.entity.b2b.common.B2BProcessFlag;
import com.kkl.kklplus.entity.b2bcenter.rpt.B2BOrderProcesslog;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ObjectUtils;

import javax.annotation.Resource;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.function.BiConsumer;

@Service
@Slf4j
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class VioMiOrderHandleService {
    @Autowired
    private B2BProcesslogService b2BProcesslogService;

    @Autowired
    private SysLogService sysLogService;

    @Resource
    private VioMiOrderHandleMapper vioMiOrderHandleMapper;

    @Autowired
    private OrderInfoService orderInfoService;

    private String validateOrderHandle(VioMiOrderHandle vioMiOrderHandle) {
        StringBuilder stringBuilder = new StringBuilder();
        if (vioMiOrderHandle.getB2bOrderId() == null) {
            stringBuilder.append("B2BOrderId不能为空.");
        }
        if (StringUtils.isBlank(vioMiOrderHandle.getOperator())){
            stringBuilder.append("操作人不能为空.");
        }
        if (vioMiOrderHandle.getCreateById() == null) {
            stringBuilder.append("createById不能为空.");
        }
        if (vioMiOrderHandle.getCreateDt() == null) {
            stringBuilder.append("createDt不能为空.");
        }

        return stringBuilder.toString();
    }

    /**
     * 派单/转派
     * @param vioMiOrderHandle
     */
    @Transactional
    public MSResponse planing(VioMiOrderHandle vioMiOrderHandle) {
        String strMsg  = validateOrderHandle(vioMiOrderHandle);
        StringBuilder stringBuilder = new StringBuilder();
        if (StringUtils.isNotBlank(strMsg)) {
            stringBuilder.append(strMsg);
        }
        if (StringUtils.isBlank(vioMiOrderHandle.getEngineerName())) {
            stringBuilder.append("师傅姓名不能为空.");
        }
        if (StringUtils.isBlank(vioMiOrderHandle.getEngineerPhone())) {
            stringBuilder.append("师傅电话不能为空.");
        }
        if (stringBuilder.length() >0) {
            return new MSResponse(MSErrorCode.FALLBACK_FAILURE, stringBuilder.toString());
        }

        MSResponse msResponse;
        VioMiOrderInfo vioMiOrderInfo = orderInfoService.getOrderStatusByOrderId(vioMiOrderHandle.getB2bOrderId());
        boolean needPlaning = false;
        String  way = "";
        String  node = "";
        if (StringUtils.isBlank(vioMiOrderInfo.getViomiStatus()) && StringUtils.isBlank(vioMiOrderInfo.getViomiSubStatus())) {
            //上一次 way为空，node为空:为新工单
            needPlaning = true;
            way = VioMiWay.STATUS_PLANING;
            node = VioMiWay.STATUS_PLANING;
        } else if (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_PLANING) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_PLANING)) {
            //上一次 way：派送师傅，node：派送师傅
            needPlaning = true;
            way = VioMiWay.STATUS_APPOINTMENT;
            node = VioMiWay.STATUS_REPLANING;
        } else if (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_APPOINTMENT) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_APPOINTMENT_SUCCESS)) {
            //上一次 way：预约上门，node: 预约成功
            needPlaning = true;
            way = VioMiWay.STATUS_CLOCK_IN_HOME;
            node = VioMiWay.STATUS_REPLANING;
        } else if (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_CLOCK_IN_HOME) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_CLOCK_IN_SUCCESS)) {
            //上一次 way：上门打卡，node: 打卡成功
            needPlaning = true;
            way = VioMiWay.STATUS_PROCESS_COMPLETE;
            node = VioMiWay.STATUS_REPLANING;
        }
        vioMiOrderHandle.setWay(way);
        vioMiOrderHandle.setNode(node);

        // 添加一个工单处理数据
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getUpdateDate()));
        vioMiOrderHandle.setStatus(0);
        vioMiOrderHandle.setUpdateById(vioMiOrderHandle.getCreateById());
        vioMiOrderHandle.setUpdateDt(vioMiOrderHandle.getCreateDt());
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getCreateDt()));
        vioMiOrderHandle.setProcessFlag(0);
        vioMiOrderHandle.setProcessTime(0);
        int effectRowCount = vioMiOrderHandleMapper.insert(vioMiOrderHandle);
        if (effectRowCount >= 1) {
            if (!needPlaning) {
                log.warn("传入的数据不能符合派单条件:{},DB中当前云米的状态:way:{},node:{}", vioMiOrderHandle.getB2bOrderId(), vioMiOrderInfo.getViomiStatus(), vioMiOrderInfo.getViomiSubStatus());
                return new MSResponse(MSErrorCode.FAILURE);
            }
            log.warn("{派单的云米状态:way{},node:{},engineer_name:{},engineer_phone:{}", way, node, vioMiOrderHandle.getEngineerName(), vioMiOrderHandle.getEngineerPhone());

            OrderHandleRequestParam<EngineerParam> orderHandleRequestParam = new OrderHandleRequestParam<>();
            orderHandleRequestParam.setOrderNumber(vioMiOrderHandle.getOrderNumber());

            // handle
            HandleParam handleParam = new HandleParam();
            handleParam.setWay(vioMiOrderHandle.getWay());
            handleParam.setNode(vioMiOrderHandle.getNode());
            handleParam.setOperator(vioMiOrderHandle.getOperator());
            handleParam.setRemarks(vioMiOrderHandle.getRemarks());
            orderHandleRequestParam.setHandle(handleParam);

            // 师傅数据
            EngineerParam engineerParam = new EngineerParam();
            engineerParam.setEngineerName(vioMiOrderHandle.getEngineerName());
            engineerParam.setEngineerPhone(vioMiOrderHandle.getEngineerPhone());
            orderHandleRequestParam.setData(engineerParam);

            msResponse = pushMessageToVioMi(orderHandleRequestParam, vioMiOrderHandle.getCreateById(), vioMiOrderHandle.getCreateDt(), vioMiOrderHandle.getId());
            if (msResponse.getCode() == 0) {
                // 更新订单状态
                VioMiOrderInfo updateVioMiOrderInfo = new VioMiOrderInfo();
                updateVioMiOrderInfo.setId(vioMiOrderInfo.getId());
                updateVioMiOrderInfo.setOrderStatus(vioMiOrderHandle.getStatus());
                updateVioMiOrderInfo.setViomiStatus(way);
                updateVioMiOrderInfo.setViomiSubStatus(node);
                updateVioMiOrderInfo.setUpdateById(vioMiOrderHandle.getUpdateById());
                updateVioMiOrderInfo.setUpdateDt(vioMiOrderHandle.getUpdateDt());
                orderInfoService.updateOrderStatus(updateVioMiOrderInfo);
            }
            return msResponse;
        } else {
            msResponse = new MSResponse(MSErrorCode.FAILURE);
            return msResponse;
        }
    }

    /**
     * 预约上门
     * @param vioMiOrderHandle
     * @return
     */
    @Transactional
    public MSResponse appointment(VioMiOrderHandle vioMiOrderHandle) {
        // 判断当前状态是否应当为预约上门
        MSResponse msResponse;
        VioMiOrderInfo vioMiOrderInfo = orderInfoService.getOrderStatusByOrderId(vioMiOrderHandle.getB2bOrderId());
        boolean needAppointment = false;
        String  way = "";
        String  node = "";
        if ((vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_PLANING) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_PLANING))   //上一次 way：派送师傅，node：派送师傅
               || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_APPOINTMENT) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_APPOINTMENT_FAILURE)) // //上一次 way：预约上门，node: 预约失败
               || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_APPOINTMENT) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_REPLANING)) //上一次 way：预约上门，node: 转派师傅
               || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_CLOCK_IN_HOME) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_REPLANING)) //上一次 way：上门打卡，node: 转派师傅
               || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_PROCESS_COMPLETE) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_REPLANING)) //上一次 way：处理完成，node: 转派师傅
            ) {
            needAppointment = true;
        }

        if (needAppointment) {
            if (vioMiOrderHandle.getTimeOfAppointment() != null) {
                //  预约成功
                way = VioMiWay.STATUS_APPOINTMENT;
                node = VioMiWay.STATUS_APPOINTMENT_SUCCESS;
            } else if (StringUtils.isNotBlank(vioMiOrderHandle.getEngineerName()) && StringUtils.isNotBlank(vioMiOrderHandle.getEngineerPhone())) {
                // 转派师傅
                way = VioMiWay.STATUS_APPOINTMENT;
                node = VioMiWay.STATUS_REPLANING;
            }
            // 预约失败，暂停工单 这两项功能暂不考虑
        }
        vioMiOrderHandle.setWay(way);
        vioMiOrderHandle.setNode(node);

        // 添加一个工单处理数据
        vioMiOrderHandle.setStatus(0);
        vioMiOrderHandle.setUpdateById(vioMiOrderHandle.getCreateById());
        vioMiOrderHandle.setUpdateDt(vioMiOrderHandle.getCreateDt());
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getCreateDt()));
        vioMiOrderHandle.setProcessFlag(0);
        vioMiOrderHandle.setProcessTime(0);
        if (StringUtils.isBlank(vioMiOrderHandle.getEngineerName()) || StringUtils.isBlank(vioMiOrderHandle.getEngineerPhone())) {
            vioMiOrderHandle.setEngineerPhone("");
            vioMiOrderHandle.setEngineerName("");
        }
        int effectRowCount = vioMiOrderHandleMapper.insert(vioMiOrderHandle);
        if (effectRowCount >= 1) {
            if (!needAppointment) {
                return new MSResponse(MSErrorCode.FAILURE);
            }

            OrderHandleRequestParam orderHandleRequestParam = null;

            if (vioMiOrderHandle.getTimeOfAppointment() != null) {
                //  预约成功
                orderHandleRequestParam = new OrderHandleRequestParam<AppointmentParam>();
                AppointmentParam appointmentParam = new AppointmentParam();
                String strDateFormat = "yyyy-MM-dd HH:mm:ss";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(strDateFormat);
                String strTimeOfAppointment = simpleDateFormat.format(new Date(vioMiOrderHandle.getTimeOfAppointment()));
                log.warn("预约时间:{}", strTimeOfAppointment);
                appointmentParam.setTimeOfAppointment(strTimeOfAppointment);

                orderHandleRequestParam.setData(appointmentParam);
            } else if (StringUtils.isNotBlank(vioMiOrderHandle.getEngineerName()) && StringUtils.isNotBlank(vioMiOrderHandle.getEngineerPhone())) {
                // 转派师傅
                orderHandleRequestParam = new OrderHandleRequestParam<EngineerParam>();
                EngineerParam engineerParam = new EngineerParam();
                engineerParam.setEngineerName(vioMiOrderHandle.getEngineerName());
                engineerParam.setEngineerPhone(vioMiOrderHandle.getEngineerPhone());
                orderHandleRequestParam.setData(engineerParam);
            }
            orderHandleRequestParam.setOrderNumber(vioMiOrderHandle.getOrderNumber());

            // handle
            HandleParam handleParam = new HandleParam();
            handleParam.setWay(vioMiOrderHandle.getWay());
            handleParam.setNode(vioMiOrderHandle.getNode());
            handleParam.setOperator(vioMiOrderHandle.getOperator());
            handleParam.setRemarks(vioMiOrderHandle.getRemarks());
            orderHandleRequestParam.setHandle(handleParam);

            msResponse = pushMessageToVioMi(orderHandleRequestParam, vioMiOrderHandle.getCreateById(), vioMiOrderHandle.getCreateDt(), vioMiOrderHandle.getId());
            if (msResponse.getCode() == 0) {
                // 更新订单状态
                VioMiOrderInfo updateVioMiOrderInfo = new VioMiOrderInfo();
                updateVioMiOrderInfo.setId(vioMiOrderInfo.getId());
                updateVioMiOrderInfo.setOrderStatus(vioMiOrderHandle.getStatus());
                updateVioMiOrderInfo.setViomiStatus(way);
                updateVioMiOrderInfo.setViomiSubStatus(node);
                updateVioMiOrderInfo.setUpdateById(vioMiOrderHandle.getUpdateById());
                updateVioMiOrderInfo.setUpdateDt(vioMiOrderHandle.getUpdateDt());
                orderInfoService.updateOrderStatus(updateVioMiOrderInfo);
            }
            return msResponse;
        } else {
            msResponse = new MSResponse(MSErrorCode.FAILURE);
            return msResponse;
        }
    }

    /**
     * 上门打卡
     * @param vioMiOrderHandle
     * @return
     */
    public MSResponse clockInHome(VioMiOrderHandle vioMiOrderHandle) {
        // 判断当前状态是否应当为上门打卡
        MSResponse msResponse;
        VioMiOrderInfo vioMiOrderInfo = orderInfoService.getOrderStatusByOrderId(vioMiOrderHandle.getB2bOrderId());
        boolean needClockInHome = false;
        String  way = "";
        String  node = "";
        if ((vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_APPOINTMENT) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_APPOINTMENT_SUCCESS))   //上一次 way：预约上门，node：预约成功
                || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_CLOCK_IN_HOME) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_REAPPOINTMENT)) // //上一次 way：上门打卡，node: 重新预约
                || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_PROCESS_COMPLETE) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_REAPPOINTMENT)) //上一次 way：处理完成，node: 重新预约
        ) {
            needClockInHome = true;
        }

        if (needClockInHome) {
            if (vioMiOrderHandle.getTimeOfAppointment() != null) {
                //  上门打卡,重新预约
                way = VioMiWay.STATUS_CLOCK_IN_HOME;
                node = VioMiWay.STATUS_REAPPOINTMENT;
            } else if (StringUtils.isNotBlank(vioMiOrderHandle.getEngineerName()) && StringUtils.isNotBlank(vioMiOrderHandle.getEngineerPhone())) {
                // 上门打卡,转派师傅
                way = VioMiWay.STATUS_CLOCK_IN_HOME;
                node = VioMiWay.STATUS_REPLANING;
            } else if (StringUtils.isNotBlank(vioMiOrderHandle.getLocation())) {
                // 上门打卡,打卡成功
                way = VioMiWay.STATUS_CLOCK_IN_HOME;
                node = VioMiWay.STATUS_CLOCK_IN_SUCCESS;
            }
        }
        vioMiOrderHandle.setWay(way);
        vioMiOrderHandle.setNode(node);

        // 添加一个工单处理数据
        vioMiOrderHandle.setStatus(0);
        vioMiOrderHandle.setUpdateById(vioMiOrderHandle.getCreateById());
        vioMiOrderHandle.setUpdateDt(vioMiOrderHandle.getCreateDt());
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getCreateDt()));
        vioMiOrderHandle.setProcessFlag(0);
        vioMiOrderHandle.setProcessTime(0);
        if (StringUtils.isBlank(vioMiOrderHandle.getEngineerName()) || StringUtils.isBlank(vioMiOrderHandle.getEngineerPhone())) {
            vioMiOrderHandle.setEngineerPhone("");
            vioMiOrderHandle.setEngineerName("");
        }
        int effectRowCount = vioMiOrderHandleMapper.insert(vioMiOrderHandle);
        if (effectRowCount >= 1) {
            if (!needClockInHome) {
                return new MSResponse(MSErrorCode.FAILURE);
            }

            OrderHandleRequestParam orderHandleRequestParam = null;

            if (vioMiOrderHandle.getTimeOfAppointment() != null) {
                //  重新预约
                orderHandleRequestParam = new OrderHandleRequestParam<AppointmentParam>();
                AppointmentParam appointmentParam = new AppointmentParam();
                String strDateFormat = "yyyy-MM-dd HH:mm:ss";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(strDateFormat);
                String strTimeOfAppointment = simpleDateFormat.format(new Date(vioMiOrderHandle.getTimeOfAppointment()));
                log.warn("预约时间:{}", strTimeOfAppointment);
                appointmentParam.setTimeOfAppointment(strTimeOfAppointment);

                orderHandleRequestParam.setData(appointmentParam);
            } else if (StringUtils.isNotBlank(vioMiOrderHandle.getEngineerName()) && StringUtils.isNotBlank(vioMiOrderHandle.getEngineerPhone())) {
                // 转派师傅
                orderHandleRequestParam = new OrderHandleRequestParam<EngineerParam>();
                EngineerParam engineerParam = new EngineerParam();
                engineerParam.setEngineerName(vioMiOrderHandle.getEngineerName());
                engineerParam.setEngineerPhone(vioMiOrderHandle.getEngineerPhone());
                orderHandleRequestParam.setData(engineerParam);
            } else if (StringUtils.isNotBlank(vioMiOrderHandle.getLocation())) {
                // 打卡成功
                orderHandleRequestParam = new OrderHandleRequestParam<LocationParam>();
                LocationParam locationParam = new LocationParam();
                locationParam.setLocation(vioMiOrderHandle.getLocation());
                orderHandleRequestParam.setData(locationParam);
            }
            orderHandleRequestParam.setOrderNumber(vioMiOrderHandle.getOrderNumber());

            // handle
            HandleParam handleParam = new HandleParam();
            handleParam.setWay(vioMiOrderHandle.getWay());
            handleParam.setNode(vioMiOrderHandle.getNode());
            handleParam.setOperator(vioMiOrderHandle.getOperator());
            handleParam.setRemarks(vioMiOrderHandle.getRemarks());
            orderHandleRequestParam.setHandle(handleParam);

            msResponse = pushMessageToVioMi(orderHandleRequestParam, vioMiOrderHandle.getCreateById(), vioMiOrderHandle.getCreateDt(), vioMiOrderHandle.getId());
            if (msResponse.getCode() == 0) {
                // 更新订单状态
                VioMiOrderInfo updateVioMiOrderInfo = new VioMiOrderInfo();
                updateVioMiOrderInfo.setId(vioMiOrderInfo.getId());
                updateVioMiOrderInfo.setOrderStatus(vioMiOrderHandle.getStatus());
                updateVioMiOrderInfo.setViomiStatus(way);
                updateVioMiOrderInfo.setViomiSubStatus(node);
                updateVioMiOrderInfo.setUpdateById(vioMiOrderHandle.getUpdateById());
                updateVioMiOrderInfo.setUpdateDt(vioMiOrderHandle.getUpdateDt());
                orderInfoService.updateOrderStatus(updateVioMiOrderInfo);
            }
            return msResponse;
        } else {
            msResponse = new MSResponse(MSErrorCode.FAILURE);
            return msResponse;
        }
    }

    /**
     * 处理完成
     * @param vioMiOrderHandle
     * @return
     */
    @Transactional
    public MSResponse processComplete(VioMiOrderHandle vioMiOrderHandle) {
        MSResponse msResponse;
        VioMiOrderInfo vioMiOrderInfo = orderInfoService.getOrderStatusByOrderId(vioMiOrderHandle.getB2bOrderId());
        String type = vioMiOrderInfo.getType();
        String subType = vioMiOrderInfo.getSubType();

        boolean needProcessComplete = false;
        String  way = "";
        String  node = "";

        if ((vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_CLOCK_IN_HOME) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_CLOCK_IN_SUCCESS))) {
            needProcessComplete = true;
        }

        InstallCompleteParam installCompleteParam = new InstallCompleteParam();
        RepairCompleteParam repairCompleteParam = new RepairCompleteParam();
        if (needProcessComplete) {
            if (type.equals(VioMiOrderType.TYPE_INSTALL)) {  // 安装
                BiConsumer<InstallCompleteParam, VioMiOrderHandle> installCompleteParamConsumer= (installComplete, orderHandle)->{
                    // 购买时间
                    if (orderHandle.getMiPurchaseTime() != null && orderHandle.getMiPurchaseTime() > 0) {
                        String strDateFormat = "yyyy-MM-dd HH:mm:ss";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(strDateFormat);
                        String strTimeOfPurchase = simpleDateFormat.format(new Date(orderHandle.getMiPurchaseTime()));
                        log.warn("购买时间:{}", strTimeOfPurchase);
                        installComplete.setMiPurchaseTime(strTimeOfPurchase);
                    } else {
                        log.warn("订单:{} 购买时间无效", orderHandle.getB2bOrderId());
                    }

                    installComplete.setMiSn(orderHandle.getMiSn());
                    // 安装完成/上门检测/需转鉴定并且产品为空调类时必填，至少一个
                    if (orderHandle.getKtSn() != null) {
                        List<MiSnParam> miSnParams = Lists.newArrayList();
                        List<VioMiKtServiceMessage> vioMiKtServiceMessages = Lists.newArrayList(orderHandle.getKtSn());
                        for (VioMiKtServiceMessage ktsn : vioMiKtServiceMessages) {
                            MiSnParam miSnParam = new MiSnParam();
                            miSnParam.setMiSn(ktsn.getMiSn());

                            miSnParams.add(miSnParam);
                        }
                        installComplete.setKtSn(miSnParams);
                        orderHandle.setKtSnStr(GsonUtils.getInstance().toJson(orderHandle.getKtSn()));
                    }

                    List<String> attachmentList = null;
                    if (ObjectUtils.isEmpty(orderHandle.getAttachment())) {
                        attachmentList = Lists.newArrayList("","","","");  // 4个为1组
                    } else  {
                        // 补全为4个一组
                        int size = orderHandle.getAttachment().size();
                        attachmentList = orderHandle.getAttachment();
                        int mod = 4 - size % 4;
                        if (mod <= 3) {
                            for(int i=0; i<mod; i++) {
                                attachmentList.add("");
                            }
                        }
                    }
                    installComplete.setAttachment(attachmentList);
                    orderHandle.setAttachmentStr(GsonUtils.getInstance().toJson(attachmentList));
                };

                way = VioMiWay.STATUS_PROCESS_COMPLETE;  // 处理完成

                if (vioMiOrderHandle.getIsFault() != null && vioMiOrderHandle.getIsFault().equals("是")) { // 需转鉴定
                    node = VioMiWay.STATUS_NEED_VALIDATE;    // 需转鉴定
                    installCompleteParamConsumer.accept(installCompleteParam, vioMiOrderHandle);

                    installCompleteParam.setWorkerErrorDesc(vioMiOrderHandle.getWorkerErrorDesc());
                    installCompleteParam.setCheckValidateResult(vioMiOrderHandle.getCheckValidateResult());
                    installCompleteParam.setCheckValidateDetail(vioMiOrderHandle.getCheckValidateDetail());
                    installCompleteParam.setPackValidate(vioMiOrderHandle.getPackValidate());
                    installCompleteParam.setPackValidateDetail(vioMiOrderHandle.getPackValidateDetail());
                    installCompleteParam.setNetworkInfo(vioMiOrderHandle.getNetworkInfo());
                } else if (StringUtils.isNotBlank(vioMiOrderHandle.getEngineerName()) && StringUtils.isNotBlank(vioMiOrderHandle.getEngineerPhone())) {
                    node = VioMiWay.STATUS_REPLANING;   //转派师傅
                    installCompleteParam.setEngineerName(vioMiOrderHandle.getEngineerName());
                    installCompleteParam.setEngineerPhone(vioMiOrderHandle.getEngineerPhone());
                } else if (vioMiOrderHandle.getTimeOfAppointment() != null && vioMiOrderHandle.getTimeOfAppointment() >0) {
                    // 重新预约
                    String strDateFormat = "yyyy-MM-dd HH:mm:ss";
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(strDateFormat);
                    String strTimeOfAppointment = simpleDateFormat.format(new Date(vioMiOrderHandle.getTimeOfAppointment()));
                    log.warn("和客户预约上门的时间:{}", strTimeOfAppointment);
                    installCompleteParam.setTimeOfAppointment(strTimeOfAppointment);
                } else {
                    if (subType.equals(VioMiOrderSubType.SUB_TYPE_INSTALL_BY_ORDER)) {// 报单安装
                        node = VioMiWay.STATUS_INSTALL_COMPLETE; //安装完成
                    } else if (subType.equals(VioMiOrderSubType.SUB_TYPE_DETECT_IN_HOME)) {// 上门检测
                        node = VioMiWay.STATUS_DETECT_IN_HOME;  //上门检测
                    }
                    installCompleteParamConsumer.accept(installCompleteParam, vioMiOrderHandle);
                }

                if (vioMiOrderHandle.getPraiseSuccess() != null && vioMiOrderHandle.getPraiseSuccess().equals("是")) {
                    List<String> praiseScreenShots = vioMiOrderHandle.getPraiseScreenshot();
                    if (ObjectUtils.isEmpty(praiseScreenShots)) {
                        praiseScreenShots = Lists.newArrayList("","","","");
                    } else {
                        // 补全为4个一组
                        int size = vioMiOrderHandle.getPraiseScreenshot().size();
                        int mod = 4 - size % 4;
                        if (mod <= 3) {
                            for(int i=0; i<mod; i++) {
                                praiseScreenShots.add("");
                            }
                        }
                    }
                    installCompleteParam.setPraiseSuccess(vioMiOrderHandle.getPraiseSuccess());
                    installCompleteParam.setPraiseScreenshot(praiseScreenShots);
                    vioMiOrderHandle.setAttachmentStr(GsonUtils.getInstance().toJson(praiseScreenShots));
                }
            } else if (type.equals(VioMiOrderType.TYPE_REPAIR)) { // 维修
                BiConsumer<RepairCompleteParam, VioMiOrderHandle> repairCompleteParamConsumer= (repairComplete, orderHandle)->{
                    // 购买时间
                    if (orderHandle.getMiPurchaseTime() != null && orderHandle.getMiPurchaseTime() > 0) {
                        String strDateFormat = "yyyy-MM-dd HH:mm:ss";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(strDateFormat);
                        String strTimeOfPurchase = simpleDateFormat.format(new Date(orderHandle.getMiPurchaseTime()));
                        log.warn("购买时间:{}", strTimeOfPurchase);
                        repairComplete.setMiPurchaseTime(strTimeOfPurchase);
                    } else {
                        log.warn("订单:{} 购买时间无效", orderHandle.getB2bOrderId());
                    }

                    repairComplete.setMiSn(orderHandle.getMiSn());
                    repairComplete.setServiceMeasures(orderHandle.getServiceMeasures());
                    repairComplete.setFaultType(orderHandle.getFaultType());
                    // 维修完成/上门检测/需转鉴定并且产品为空调类时必填
                    if (orderHandle.getKtSn() != null) {
                        List<MiSnParam> miSnParams = Lists.newArrayList();
                        List<VioMiKtServiceMessage> vioMiKtServiceMessages = Lists.newArrayList(orderHandle.getKtSn());
                        for (VioMiKtServiceMessage ktsn : vioMiKtServiceMessages) {
                            MiSnParam miSnParam = new MiSnParam();
                            miSnParam.setMiSn(ktsn.getMiSn());
                            miSnParam.setServiceMeasures(ktsn.getServiceMeasures());
                            miSnParam.setIsFault(ktsn.getIsFault());
                            miSnParam.setFaultType(ktsn.getFaultType());

                            miSnParams.add(miSnParam);
                        }
                        repairComplete.setKtSn(miSnParams);
                        orderHandle.setKtSnStr(GsonUtils.getInstance().toJson(miSnParams));
                    }

                    List<String> attachmentList = null;
                    if (ObjectUtils.isEmpty(orderHandle.getAttachment())) {
                        attachmentList = Lists.newArrayList("", "", "", "");  // 4个为1组
                    } else  {
                        // 补全为4个一组
                        int size = orderHandle.getAttachment().size();
                        attachmentList = orderHandle.getAttachment();
                        int mod = 4 - size % 4;
                        if (mod <= 3) {
                            for(int i=0; i<mod; i++) {
                                attachmentList.add("");
                            }
                        }
                    }
                    repairComplete.setAttachment(attachmentList);
                    orderHandle.setAttachmentStr(GsonUtils.getInstance().toJson(attachmentList));
                };

                way = VioMiWay.STATUS_PROCESS_COMPLETE;  // 处理完成
                if (vioMiOrderHandle.getIsFault() != null  && vioMiOrderHandle.getIsFault().equals("是")) { // 需转鉴定
                    node = VioMiWay.STATUS_NEED_VALIDATE;    // 需转鉴定
                    repairCompleteParamConsumer.accept(repairCompleteParam, vioMiOrderHandle);

                    repairCompleteParam.setWorkerErrorDesc(vioMiOrderHandle.getWorkerErrorDesc());
                    repairCompleteParam.setCheckValidateResult(vioMiOrderHandle.getCheckValidateResult());
                    repairCompleteParam.setCheckValidateDetail(vioMiOrderHandle.getCheckValidateDetail());
                    repairCompleteParam.setPackValidate(vioMiOrderHandle.getPackValidate());
                    repairCompleteParam.setPackValidateDetail(vioMiOrderHandle.getPackValidateDetail());
                    repairCompleteParam.setNetworkInfo(vioMiOrderHandle.getNetworkInfo());
                } else if (StringUtils.isNotBlank(vioMiOrderHandle.getEngineerName()) && StringUtils.isNotBlank(vioMiOrderHandle.getEngineerPhone())) {
                    node = VioMiWay.STATUS_REPLANING;   //转派师傅
                    repairCompleteParam.setEngineerName(vioMiOrderHandle.getEngineerName());
                    repairCompleteParam.setEngineerPhone(vioMiOrderHandle.getEngineerPhone());
                } else if (vioMiOrderHandle.getTimeOfAppointment() != null && vioMiOrderHandle.getTimeOfAppointment() >0) {
                    // 重新预约
                    String strDateFormat = "yyyy-MM-dd HH:mm:ss";
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(strDateFormat);
                    String strTimeOfAppointment = simpleDateFormat.format(new Date(vioMiOrderHandle.getTimeOfAppointment()));
                    log.warn("和客户预约上门的时间:{}", strTimeOfAppointment);
                    repairCompleteParam.setTimeOfAppointment(strTimeOfAppointment);
                } else {
                    if (subType.equals(VioMiOrderSubType.SUB_TYPE_REPAIR_BY_ORDER)) {// 报单维修
                        node = VioMiWay.STATUS_REPAIR_COMPLETE; // 维修完成
                    } else if (subType.equals(VioMiOrderSubType.SUB_TYPE_CHECK_IN_HOME)) {// 上门检测
                        node = VioMiWay.STATUS_DETECT_IN_HOME;  // 上门检测
                    }
                    repairCompleteParamConsumer.accept(repairCompleteParam, vioMiOrderHandle);
                }

                if (vioMiOrderHandle.getPraiseSuccess() != null && vioMiOrderHandle.getPraiseSuccess().equals("是")) {
                    List<String> praiseScreenShots = vioMiOrderHandle.getPraiseScreenshot();
                    if (ObjectUtils.isEmpty(praiseScreenShots)) {
                        praiseScreenShots = Lists.newArrayList("","","","");
                    } else {
                        // 补全为4个一组
                        int size = vioMiOrderHandle.getPraiseScreenshot().size();
                        int mod = 4 - size % 4;
                        if (mod <= 3) {
                            for(int i=0; i<mod; i++) {
                                praiseScreenShots.add("");
                            }
                        }
                    }
                    repairCompleteParam.setPraiseSuccess(vioMiOrderHandle.getPraiseSuccess());
                    repairCompleteParam.setPraiseScreenshot(praiseScreenShots);
                    vioMiOrderHandle.setPraiseScreenshotStr(GsonUtils.getInstance().toJson(praiseScreenShots));
                }
            }
        }
        vioMiOrderHandle.setWay(way);
        vioMiOrderHandle.setNode(node);

        // 添加一个工单处理数据
        vioMiOrderHandle.setStatus(0);
        vioMiOrderHandle.setUpdateById(vioMiOrderHandle.getCreateById());
        vioMiOrderHandle.setUpdateDt(vioMiOrderHandle.getCreateDt());
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getCreateDt()));
        vioMiOrderHandle.setProcessFlag(0);
        vioMiOrderHandle.setProcessTime(0);
        if (StringUtils.isBlank(vioMiOrderHandle.getEngineerName()) || StringUtils.isBlank(vioMiOrderHandle.getEngineerPhone())) {
            vioMiOrderHandle.setEngineerPhone("");
            vioMiOrderHandle.setEngineerName("");
        }
        int effectRowCount = vioMiOrderHandleMapper.insert(vioMiOrderHandle);
        if (effectRowCount >= 1) {
            if (!needProcessComplete) {
                return new MSResponse(MSErrorCode.FAILURE);
            }

            OrderHandleRequestParam orderHandleRequestParam = null;
            if (type.equals(VioMiOrderType.TYPE_INSTALL)) {  // 安装
                orderHandleRequestParam = new OrderHandleRequestParam<InstallCompleteParam>();
                orderHandleRequestParam.setData(installCompleteParam);
            } else if (type.equals(VioMiOrderType.TYPE_REPAIR)) {
                orderHandleRequestParam = new OrderHandleRequestParam<RepairCompleteParam>();
                orderHandleRequestParam.setData(repairCompleteParam);
            }
            orderHandleRequestParam.setOrderNumber(vioMiOrderHandle.getOrderNumber());

            // handle
            HandleParam handleParam = new HandleParam();
            handleParam.setWay(vioMiOrderHandle.getWay());
            handleParam.setNode(vioMiOrderHandle.getNode());
            handleParam.setOperator(vioMiOrderHandle.getOperator());
            handleParam.setRemarks(vioMiOrderHandle.getRemarks());
            if (type.equals(VioMiOrderType.TYPE_REPAIR)) {  // 维修，附上更换的料号
                handleParam.setParts(vioMiOrderHandle.getParts());
            }
            orderHandleRequestParam.setHandle(handleParam);

            msResponse = pushMessageToVioMi(orderHandleRequestParam, vioMiOrderHandle.getCreateById(), vioMiOrderHandle.getCreateDt(), vioMiOrderHandle.getId());
            if (msResponse.getCode() == 0) {
                // 更新订单状态
                VioMiOrderInfo updateVioMiOrderInfo = new VioMiOrderInfo();
                updateVioMiOrderInfo.setId(vioMiOrderInfo.getId());
                updateVioMiOrderInfo.setOrderStatus(vioMiOrderHandle.getStatus());
                updateVioMiOrderInfo.setViomiStatus(way);
                updateVioMiOrderInfo.setViomiSubStatus(node);
                updateVioMiOrderInfo.setUpdateById(vioMiOrderHandle.getUpdateById());
                updateVioMiOrderInfo.setUpdateDt(vioMiOrderHandle.getUpdateDt());
                orderInfoService.updateOrderStatus(updateVioMiOrderInfo);
            }
            return msResponse;
        } else {
            msResponse = new MSResponse(MSErrorCode.FAILURE);
            return msResponse;
        }
    }

    /**
     * 申请完单
     * @param vioMiOrderHandle
     * @return
     */
    @Transactional
    public MSResponse applyFinished(VioMiOrderHandle vioMiOrderHandle) {
        MSResponse msResponse;
        VioMiOrderInfo vioMiOrderInfo = orderInfoService.getOrderStatusByOrderId(vioMiOrderHandle.getB2bOrderId());
        boolean needApply = false;
        String  way = "";
        String  node = "";
        if ((vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_PROCESS_COMPLETE) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_INSTALL_COMPLETE))   //上一次 way：处理完成，node：安装完成
                || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_PROCESS_COMPLETE) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_REPAIR_COMPLETE)) //上一次 way：处理完成，node: 维修完成
        ) {
            needApply = true;
        }

        if (needApply) {
            way = VioMiWay.STATUS_REPLY_FINISHED;  // 申请完单
            node = VioMiWay.STATUS_REPLY_FINISHED;
        }
        vioMiOrderHandle.setWay(way);
        vioMiOrderHandle.setNode(node);

        // 添加一个工单处理数据
        vioMiOrderHandle.setStatus(0);
        vioMiOrderHandle.setUpdateById(vioMiOrderHandle.getCreateById());
        vioMiOrderHandle.setUpdateDt(vioMiOrderHandle.getCreateDt());
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getCreateDt()));
        vioMiOrderHandle.setProcessFlag(0);
        vioMiOrderHandle.setProcessTime(0);
        if (StringUtils.isBlank(vioMiOrderHandle.getEngineerName()) || StringUtils.isBlank(vioMiOrderHandle.getEngineerPhone())) {
            vioMiOrderHandle.setEngineerPhone("");
            vioMiOrderHandle.setEngineerName("");
        }
        int effectRowCount = vioMiOrderHandleMapper.insert(vioMiOrderHandle);
        if (effectRowCount >= 1) {
            if (!needApply) {
                return new MSResponse(MSErrorCode.FAILURE);
            }

            OrderHandleRequestParam<ApplyFinishedParam> orderHandleRequestParam = new OrderHandleRequestParam<>();
            ApplyFinishedParam applyFinishedParam = new ApplyFinishedParam();
            applyFinishedParam.setVerifyCode(vioMiOrderHandle.getVerifyCode());
            orderHandleRequestParam.setData(applyFinishedParam);
            orderHandleRequestParam.setOrderNumber(vioMiOrderHandle.getOrderNumber());

            // handle
            HandleParam handleParam = new HandleParam();
            handleParam.setWay(vioMiOrderHandle.getWay());
            handleParam.setNode(vioMiOrderHandle.getNode());
            handleParam.setOperator(vioMiOrderHandle.getOperator());
            handleParam.setRemarks(vioMiOrderHandle.getRemarks());
            orderHandleRequestParam.setHandle(handleParam);

            msResponse = pushMessageToVioMi(orderHandleRequestParam, vioMiOrderHandle.getCreateById(), vioMiOrderHandle.getCreateDt(), vioMiOrderHandle.getId());
            if (msResponse.getCode() == 0) {
                // 更新订单状态
                VioMiOrderInfo updateVioMiOrderInfo = new VioMiOrderInfo();
                updateVioMiOrderInfo.setId(vioMiOrderInfo.getId());
                updateVioMiOrderInfo.setOrderStatus(vioMiOrderHandle.getStatus());
                updateVioMiOrderInfo.setViomiStatus(way);
                updateVioMiOrderInfo.setViomiSubStatus(node);
                updateVioMiOrderInfo.setUpdateById(vioMiOrderHandle.getUpdateById());
                updateVioMiOrderInfo.setUpdateDt(vioMiOrderHandle.getUpdateDt());
                orderInfoService.updateOrderStatus(updateVioMiOrderInfo);
            }
            return msResponse;
        } else {
            msResponse = new MSResponse(MSErrorCode.FAILURE);
            return msResponse;
        }
    }

    /**
     * 工单回访
     * @param vioMiOrderHandle
     * @return
     */
    @Transactional
    public MSResponse orderReturnVisit(VioMiOrderHandle vioMiOrderHandle) {
        MSResponse msResponse;
        VioMiOrderInfo vioMiOrderInfo = orderInfoService.getOrderStatusByOrderId(vioMiOrderHandle.getB2bOrderId());
        String type = vioMiOrderInfo.getType();
        boolean needVisit = false;
        String  way = "";
        String  node = "";
        if ((vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_PROCESS_COMPLETE) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_DETECT_IN_HOME))   //上一次 way：处理完成，node：上门检测
                || (vioMiOrderInfo.getViomiStatus().equals(VioMiWay.STATUS_REPLY_FINISHED) && vioMiOrderInfo.getViomiSubStatus().equals(VioMiWay.STATUS_REPLY_FINISHED)) //上一次 way：申请完单，node: 申请完单
        ) {
            needVisit = true;
        }

        if (needVisit) {
            way = VioMiWay.STATUS_ORDER_RETURN_VISIT;  // 工单回访
            node = VioMiWay.STATUS_PLEASED_FINISHED;   //  满意完结
        }
        vioMiOrderHandle.setWay(way);
        vioMiOrderHandle.setNode(node);

        // 添加一个工单处理数据
        vioMiOrderHandle.setStatus(0);
        vioMiOrderHandle.setUpdateById(vioMiOrderHandle.getCreateById());
        vioMiOrderHandle.setUpdateDt(vioMiOrderHandle.getCreateDt());
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getCreateDt()));
        vioMiOrderHandle.setProcessFlag(0);
        vioMiOrderHandle.setProcessTime(0);
        if (StringUtils.isBlank(vioMiOrderHandle.getEngineerName()) || StringUtils.isBlank(vioMiOrderHandle.getEngineerPhone())) {
            vioMiOrderHandle.setEngineerPhone("");
            vioMiOrderHandle.setEngineerName("");
        }
        int effectRowCount = vioMiOrderHandleMapper.insert(vioMiOrderHandle);
        if (effectRowCount >= 1) {
            if (!needVisit) {
                return new MSResponse(MSErrorCode.FAILURE);
            }

            OrderHandleRequestParam<ReturnVisitParam> orderHandleRequestParam = new OrderHandleRequestParam<>();

            DecimalFormat df = new DecimalFormat("0.00");
            ReturnVisitParam returnVisitParam = new ReturnVisitParam();
            if (type.equals(VioMiOrderType.TYPE_INSTALL)) {  // 安装
                if (Math.abs(vioMiOrderHandle.getInstallationFee()) >0) {
                    returnVisitParam.setInstallationFee(df.format(vioMiOrderHandle.getInstallationFee()));
                }
            } else if (type.equals(VioMiOrderType.TYPE_REPAIR)) {
                if (Math.abs(vioMiOrderHandle.getMaintenanceCost()) >0) {
                    returnVisitParam.setMaintenanceCost(df.format(vioMiOrderHandle.getMaintenanceCost()));
                }
            }
            if (vioMiOrderHandle.getRemoteFee() != null && Math.abs(vioMiOrderHandle.getRemoteFee()) >0) {
                returnVisitParam.setRemoteFee(df.format(vioMiOrderHandle.getRemoteFee()));
            }
            if (vioMiOrderHandle.getDetectFee() != null && Math.abs(vioMiOrderHandle.getDetectFee()) >0) {
                returnVisitParam.setDetectFee(df.format(vioMiOrderHandle.getDetectFee()));
            }
            if (vioMiOrderHandle.getFineFee() != null && Math.abs(vioMiOrderHandle.getFineFee()) >0) {
                returnVisitParam.setFineFee(df.format(vioMiOrderHandle.getFineFee()));
            }
            if (vioMiOrderHandle.getMileage()!= null && Math.abs(vioMiOrderHandle.getMileage()) >0) {
                returnVisitParam.setMileage(df.format(vioMiOrderHandle.getMileage()));
            }

            orderHandleRequestParam.setData(returnVisitParam);
            orderHandleRequestParam.setOrderNumber(vioMiOrderHandle.getOrderNumber());

            // handle
            HandleParam handleParam = new HandleParam();
            handleParam.setWay(vioMiOrderHandle.getWay());
            handleParam.setNode(vioMiOrderHandle.getNode());
            handleParam.setOperator(vioMiOrderHandle.getOperator());
            handleParam.setRemarks(vioMiOrderHandle.getRemarks());
            orderHandleRequestParam.setHandle(handleParam);

            msResponse = pushMessageToVioMi(orderHandleRequestParam, vioMiOrderHandle.getCreateById(), vioMiOrderHandle.getCreateDt(), vioMiOrderHandle.getId());
            if (msResponse.getCode() == 0) {
                // 更新订单状态
                VioMiOrderInfo updateVioMiOrderInfo = new VioMiOrderInfo();
                updateVioMiOrderInfo.setId(vioMiOrderInfo.getId());
                updateVioMiOrderInfo.setOrderStatus(vioMiOrderHandle.getStatus());
                updateVioMiOrderInfo.setViomiStatus(way);
                updateVioMiOrderInfo.setViomiSubStatus(node);
                updateVioMiOrderInfo.setUpdateById(vioMiOrderHandle.getUpdateById());
                updateVioMiOrderInfo.setUpdateDt(vioMiOrderHandle.getUpdateDt());
                orderInfoService.updateOrderStatus(updateVioMiOrderInfo);
            }
            return msResponse;
        } else {
            msResponse = new MSResponse(MSErrorCode.FAILURE);
            return msResponse;
        }
    }

    /**
     * 推送工单办理消息给云米
     * @param orderHandleRequestParam
     * @param createById
     * @param createDt
     * @param orderHandleId
     * @return
     */
    public MSResponse pushMessageToVioMi(OrderHandleRequestParam orderHandleRequestParam, Long createById, Long createDt, Long orderHandleId) {
        // 获取工单状态
        String strDataType = orderHandleRequestParam.getHandle().getWay();
        String strOrderNumber = orderHandleRequestParam.getOrderNumber();

        MSResponse msResponse = new MSResponse();
        msResponse.setErrorCode(MSErrorCode.SUCCESS);

        // 生成发送Log
        B2BOrderProcesslog b2BProcesslog = new B2BOrderProcesslog();
        b2BProcesslog.setDataType(strDataType);
        b2BProcesslog.setInterfaceName(OperationCommand.OperationCode.ORDER_HANDLE.apiUrl);
        b2BProcesslog.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_PROCESSING.value);
        b2BProcesslog.setProcessTime(0);
        b2BProcesslog.setCreateById(createById);
        b2BProcesslog.setUpdateById(createById);
        b2BProcesslog.preInsert();
        b2BProcesslog.setQuarter(QuarterUtils.getQuarter(b2BProcesslog.getCreateDt()));

        // 更新OrderHandle
        VioMiOrderHandle vioMiOrderHandle = new VioMiOrderHandle();
        vioMiOrderHandle.setId(orderHandleId);
        vioMiOrderHandle.setUpdateById(createById);
        vioMiOrderHandle.setUpdateDt(createDt);
        vioMiOrderHandle.setQuarter(QuarterUtils.getQuarter(vioMiOrderHandle.getUpdateDate()));
        vioMiOrderHandle.setProcessTime(0);

        // 生成要发送的json对象
        String infoJson = GsonUtils.getInstance().toJson(orderHandleRequestParam);
        log.warn("发送给云米的数据:{}", infoJson);
        b2BProcesslog.setInfoJson(infoJson);
        try {
            b2BProcesslogService.insert(b2BProcesslog);
            OperationCommand command = OperationCommand.newInstance(OperationCommand.OperationCode.ORDER_HANDLE, orderHandleRequestParam);
            ResponseBody<ResponseBody> resBody = OkHttpUtils.postSyncGenericNew(command, ResponseBody.class);
            b2BProcesslog.setResultJson(resBody.getOriginalJson());
            ResponseBody data = resBody.getData();
            // for test
            resBody.setErrorCode(0);
            data = new ResponseBody();
            data.setErrorCode(0);
            data.setErrorMsg("调用成功");
            //
            if( resBody.getErrorCode() == ResponseBody.ErrorCode.SUCCESS.code && data != null){
                if (data.getErrorCode().equals(0)) { // 0 -- 成功
                    b2BProcesslog.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_SUCESS.value);
                    b2BProcesslogService.updateProcessFlag(b2BProcesslog);

                    vioMiOrderHandle.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_SUCESS.value);
                    vioMiOrderHandle.setProcessComment(data.getErrorMsg());
                    vioMiOrderHandleMapper.updateProcessFlag(vioMiOrderHandle);

                    msResponse.setMsg(data.getErrorMsg());
                    return msResponse;
                }
            }
            // 1：签名无效 2：参数有误3：流程错误 4：办理方式错误 5：办理参数有误 6：验收码错误 7：SN码有误
            String errorStr = data != null ? data.getErrorMsg() : resBody.getErrorMsg();
            Integer errorCode = data != null ? data.getErrorCode() : resBody.getErrorCode();
            errorStr = StringUtils.left(errorStr,255);
            b2BProcesslog.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_FAILURE.value);
            b2BProcesslog.setProcessComment(errorStr);
            msResponse.setThirdPartyErrorCode(new MSErrorCode(errorCode,errorStr));
            //errorCode大于等于90000300，设置错误编码，便于调用方重试
            if(errorCode >= ResponseBody.ErrorCode.REQUEST_INVOCATION_FAILURE.code){
                msResponse.setCode(errorCode);
                msResponse.setMsg(errorStr);
            }
            b2BProcesslogService.updateProcessFlag(b2BProcesslog);

            vioMiOrderHandle.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_FAILURE.value);
            vioMiOrderHandle.setProcessComment(errorStr);
            vioMiOrderHandleMapper.updateProcessFlag(vioMiOrderHandle);

            return msResponse;
        }catch (Exception e) {
            String errorMsg = StringUtils.left(e.getMessage(), 255);
            msResponse.setErrorCode(MSErrorCode.FAILURE);
            msResponse.setMsg(errorMsg);
            b2BProcesslog.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_FAILURE.value);
            b2BProcesslog.setProcessComment(errorMsg);
            b2BProcesslogService.updateProcessFlag(b2BProcesslog);
            log.error("errorStr:{}", e.getMessage());
            sysLogService.insert(1L, infoJson, e.getMessage(), "调用云米工单处理接口失败", String.format("orderNumber:%s,handleWay:%s",strOrderNumber,strDataType), "POST");
            return msResponse;
        }
    }

}
