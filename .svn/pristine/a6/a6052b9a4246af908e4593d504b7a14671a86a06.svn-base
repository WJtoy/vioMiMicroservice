package com.kkl.kklplus.b2b.viomi.service;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.google.gson.reflect.TypeToken;
import com.kkl.kklplus.b2b.viomi.entity.VioMiOrderInfo;
import com.kkl.kklplus.b2b.viomi.entity.request.*;
import com.kkl.kklplus.b2b.viomi.entity.response.VioMiResponse;
import com.kkl.kklplus.b2b.viomi.mapper.OrderInfoMapper;
import com.kkl.kklplus.b2b.viomi.mq.sender.B2BOrderMQSender;
import com.kkl.kklplus.b2b.viomi.utils.GsonUtils;
import com.kkl.kklplus.b2b.viomi.utils.QuarterUtils;
import com.kkl.kklplus.b2b.viomi.utils.VioMiUtils;
import com.kkl.kklplus.entity.b2b.common.B2BProcessFlag;
import com.kkl.kklplus.entity.b2bcenter.md.B2BDataSourceEnum;
import com.kkl.kklplus.entity.b2bcenter.md.B2BShopEnum;
import com.kkl.kklplus.entity.b2bcenter.pb.MQB2BOrderMessage;
import com.kkl.kklplus.entity.b2bcenter.rpt.B2BOrderProcesslog;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrder;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrderSearchModel;
import com.kkl.kklplus.entity.b2bcenter.sd.B2BOrderTransferResult;
import com.kkl.kklplus.entity.common.MSPage;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.lang.reflect.Type;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * describe:
 *
 * @author chenxj
 * @date 2020/09/18
 */
@Slf4j
@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class OrderInfoService {

    @Resource
    private OrderInfoMapper orderInfoMapper;

    @Autowired
    private B2BOrderMQSender b2BOrderMQSender;

    @Autowired
    private B2BProcesslogService b2BProcesslogService;
    /**
     * 处理数据
     * @param json
     * @return
     */
    public VioMiResponse createOrder(String json) {
        B2BOrderProcesslog b2BProcesslog = new B2BOrderProcesslog();
        b2BProcesslog.setInterfaceName("createOrder");
        b2BProcesslog.setInfoJson(json);
        b2BProcesslog.setProcessFlag(B2BProcessFlag.PROCESS_FLAG_ACCEPT.value);
        b2BProcesslog.setProcessTime(0);
        b2BProcesslog.setCreateById(1L);
        b2BProcesslog.setUpdateById(1L);
        b2BProcesslog.preInsert();
        b2BProcesslog.setQuarter(QuarterUtils.getQuarter(b2BProcesslog.getCreateDt()));
        b2BProcesslogService.insert(b2BProcesslog);
        VioMiCommonRequest<VioMiOrderInfoRequest> request = GsonUtils.getInstance().fromUnderscoresJson(json, new TypeToken<VioMiCommonRequest<VioMiOrderInfoRequest>>() {
        }.getType());
        VioMiOrderInfoRequest data = request.getData();
        VioMiResponse response = valiOrderdata(data);
        if(response.getRes() == 0){
            Long id = orderInfoMapper.getIdByOrderNumber(data.getOrderNumber());
            if(id != null && id > 0){
                response.setRes(VioMiUtils.FAILURE_CODE);
                response.setMsg("该单据已存在");
                return response;
            }
            VioMiOrderInfo orderInfo = parseOrderEntity(data);
            orderInfoMapper.insert(orderInfo);
            sendOrderMQ(orderInfo);
            Map<String,String> repData = new HashMap<>();
            repData.put("number",orderInfo.getId().toString());
            response.setData(repData);
        }
        return response;
    }

    private void sendOrderMQ(VioMiOrderInfo orderInfo) {
        MQB2BOrderMessage.B2BOrderMessage.Builder builder = MQB2BOrderMessage.B2BOrderMessage.newBuilder()
                .setId(orderInfo.getId())
                .setDataSource(B2BDataSourceEnum.VIOMI.id)
                .setOrderNo(orderInfo.getOrderNumber())
                .setShopId(B2BShopEnum.VIOMI.id)
                .setUserName(orderInfo.getContacts())
                .setUserMobile(orderInfo.getContactsPhone())
                .setUserAddress(orderInfo.getAddress()+orderInfo.getAddressDetail())
                .setStatus(0)
                .setParentBizOrderId(orderInfo.getOrderNumber())
                .setDescription(StringUtils.trimToEmpty(orderInfo.getRemarks()))
                .setBuyDate(orderInfo.getMiPurchaseTime())
                .setQuarter(orderInfo.getQuarter());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Long expectedServiceTime = orderInfo.getExpectedServiceTime();
        if(expectedServiceTime != null && expectedServiceTime > 0){
            try {
                builder.setExpectServiceTime(sdf.format(new Date(expectedServiceTime)));
            } catch (Exception e) {
                log.error("期望日期格式异常:{}:{}",orderInfo.getOrderNumber(),expectedServiceTime);
            }
        }
        MQB2BOrderMessage.B2BOrderItem.Builder b2BOrderItem = MQB2BOrderMessage.B2BOrderItem.newBuilder()
                .setProductCode(orderInfo.getProduct_69Code())
                .setProductName(orderInfo.getProductName())
                .setProductSpec(StringUtils.trimToEmpty(orderInfo.getProductModel()))
                .setServiceType(orderInfo.getType())
                .setWarrantyType(orderInfo.getInnerGuarantee())
                .setQty(1);
        builder.addB2BOrderItem(b2BOrderItem.build());
        MQB2BOrderMessage.B2BOrderMessage b2BOrderMessage = builder.build();
        b2BOrderMQSender.send(b2BOrderMessage);
    }

    private VioMiOrderInfo parseOrderEntity(VioMiOrderInfoRequest data) {
        VioMiOrderInfo orderInfo = new VioMiOrderInfo();
        orderInfo.setCreateById(1L);
        orderInfo.preInsert();
        orderInfo.setQuarter(QuarterUtils.getQuarter(orderInfo.getCreateDt()));
        orderInfo.setOrderNumber(data.getOrderNumber());
        VioMiHandleRequest handle = data.getHandle();
        orderInfo.setOperator(handle.getOperator());
        orderInfo.setRemarks(handle.getRemarks());
        VioMiOrderRequest order = data.getOrder();
        orderInfo.setContacts(order.getContacts());
        orderInfo.setContactsPhone(order.getContactsPhone());
        orderInfo.setAddress(order.getAddress());
        orderInfo.setAddressDetail(order.getAddressDetail());
        orderInfo.setType(order.getType());
        orderInfo.setSubType(order.getSubType());
        orderInfo.setSource(order.getSource());
        orderInfo.setPaymentObject(order.getPaymentObject());
        orderInfo.setComplainNetworkNumber(order.getComplainNetworkNumber());
        orderInfo.setComplainOrderNumber(order.getComplainOrderNumber());
        orderInfo.setUniqueid(order.getUniqueid());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String expectedServiceTime = order.getExpectedServiceTime();
        if(StringUtils.isNotBlank(expectedServiceTime)){
            try {
                orderInfo.setExpectedServiceTime(sdf.parse(expectedServiceTime).getTime());
            } catch (ParseException e) {
                log.error("期望日期格式异常:{}:{}",data.getOrderNumber(),expectedServiceTime);
            }
        }else{
            orderInfo.setExpectedServiceTime(0L);
        }
        VioMiProduct product = data.getProduct();
        orderInfo.setProductName(product.getProductName());
        orderInfo.setProductModel(product.getProductModel());
        orderInfo.setProductType(product.getProductType());
        orderInfo.setProductBigType(product.getProductBigType());
        orderInfo.setProduct_69Code(product.getProduct_69Code());
        orderInfo.setMiSn(product.getMiSn());
        orderInfo.setMiPurchaseChannel(product.getMiPurchaseChannel());
        orderInfo.setMiOrderNumber(product.getMiOrderNumber());
        orderInfo.setInnerGuarantee(product.getInnerGuarantee());
        String miPurchaseTime = product.getMiPurchaseTime();
        if(StringUtils.isNotBlank(miPurchaseTime)){
            try {
                orderInfo.setMiPurchaseTime(sdf.parse(miPurchaseTime).getTime());
            } catch (ParseException e) {
                log.error("购买日期格式异常:{}:{}",data.getOrderNumber(),miPurchaseTime);
            }
        }else{
            orderInfo.setMiPurchaseTime(0L);
        }
        List<VioMiKtProduct> ktProduct = data.getKtProduct();
        if(ktProduct != null){
            orderInfo.setKtProductJson(GsonUtils.getInstance().toJson(ktProduct));
        }
        return orderInfo;
    }

    private VioMiResponse valiOrderdata(VioMiOrderInfoRequest data) {
        VioMiResponse response = new VioMiResponse();
        String orderNumber = data.getOrderNumber();
        if(StringUtils.isBlank(orderNumber)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("工单编号不能为空");
            return response;
        }
        VioMiHandleRequest handle = data.getHandle();
        if(handle == null){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("办理方式不能为空");
            return response;
        }
        VioMiOrderRequest order = data.getOrder();
        if(order == null){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("工单信息不能为空");
            return response;
        }
        String contacts = order.getContacts();
        if(StringUtils.isBlank(contacts)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("用户姓名不能为空");
            return response;
        }
        String contactsPhone = order.getContactsPhone();
        if(StringUtils.isBlank(contactsPhone)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("用户电话不能为空");
            return response;
        }
        String address = order.getAddress();
        if(StringUtils.isBlank(address)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("用户地址不能为空");
            return response;
        }
        String addressDetail = order.getAddressDetail();
        if(StringUtils.isBlank(addressDetail)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("用户详细地址不能为空");
            return response;
        }
        String type = order.getType();
        if(StringUtils.isBlank(type)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("工单类型不能为空");
            return response;
        }
        String subType = order.getSubType();
        if(StringUtils.isBlank(subType)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("工单子类型不能为空");
            return response;
        }
        VioMiProduct product = data.getProduct();
        if(product == null){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("服务产品不能为空");
            return response;
        }
        String productName = product.getProductName();
        if(StringUtils.isBlank(productName)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("产品名称不能为空");
            return response;
        }
        String product69Code = product.getProduct_69Code();
        if(StringUtils.isBlank(product69Code)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("产品69码不能为空");
            return response;
        }
        String innerGuarantee = product.getInnerGuarantee();
        if(StringUtils.isBlank(innerGuarantee)){
            response.setRes(VioMiUtils.FAILURE_CODE);
            response.setMsg("产品保内外不能为空");
            return response;
        }
//        /*String miPurchaseTime = product.getMiPurchaseTime();
//        if(StringUtils.isBlank(miPurchaseTime)){
//            response.setRes(VioMiUtils.FAILURE_CODE);
//            response.setMsg("购买时间不能为空");
//            return response;
//        }*/
        return response;
    }

    public MSPage<B2BOrder> getList(B2BOrderSearchModel orderSearchModel) {
        if (orderSearchModel.getPage() != null) {
            PageHelper.startPage(orderSearchModel.getPage().getPageNo(), orderSearchModel.getPage().getPageSize());
            Page<VioMiOrderInfo> orderPage = orderInfoMapper.getList(orderSearchModel);
            MSPage<B2BOrder> returnPage = new MSPage<>();
            Page<B2BOrder> b2bOrderPage = new Page<>();
            for(VioMiOrderInfo order : orderPage){
                B2BOrder b2bOrder = new B2BOrder();
                b2bOrder.setId(order.getId());
                b2bOrder.setB2bOrderId(order.getId());
                b2bOrder.setDataSource(B2BDataSourceEnum.VIOMI.id);
                b2bOrder.setOrderNo(order.getOrderNumber());
                b2bOrder.setParentBizOrderId(order.getOrderNumber());
                b2bOrder.setShopId(B2BShopEnum.VIOMI.id);
                b2bOrder.setUserName(order.getContacts());
                b2bOrder.setUserMobile(order.getContactsPhone());
                b2bOrder.setUserAddress(order.getAddress()+order.getAddressDetail());
                b2bOrder.setDescription(order.getRemarks());

                b2bOrder.setStatus(0);
                b2bOrder.setProcessFlag(order.getProcessFlag());
                b2bOrder.setProcessTime(order.getProcessTime());
                b2bOrder.setProcessComment(order.getProcessComment());
                b2bOrder.setQuarter(order.getQuarter());
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Long expectedServiceTime = order.getExpectedServiceTime();
                if(expectedServiceTime != null && expectedServiceTime > 0){
                    try {
                        b2bOrder.setExpectServiceTime(sdf.format(new Date(expectedServiceTime)));
                    } catch (Exception e) {
                        log.error("期望日期格式异常:{}:{}",order.getOrderNumber(),expectedServiceTime);
                    }
                }
                //产品
                B2BOrder.B2BOrderItem product = new B2BOrder.B2BOrderItem();
                product.setProductCode(order.getProduct_69Code());
                product.setProductSpec(order.getProductModel().toString());
                product.setQty(1);
                product.setClassName(order.getProductType());
                product.setProductName(order.getProductName());
                product.setServiceType(order.getType());
                product.setWarrantyType(order.getInnerGuarantee());
                b2bOrder.getItems().add(product);
                b2bOrderPage.add(b2bOrder);
            }
            returnPage.setPageNo(orderPage.getPageNum());
            returnPage.setPageSize(orderPage.getPageSize());
            returnPage.setPageCount(orderPage.getPages());
            returnPage.setRowCount((int) orderPage.getTotal());
            returnPage.setList(b2bOrderPage.getResult());
            return returnPage;
        } else {
            return null;
        }
    }

    public List<VioMiOrderInfo> findOrdersProcessFlag(List<B2BOrderTransferResult> results) {
        return orderInfoMapper.findOrdersProcessFlag(results);
    }

    @Transactional(rollbackFor = Exception.class)
    public void updateTransferResult(List<VioMiOrderInfo> orders) {
        for(VioMiOrderInfo orderInfo:orders){
            orderInfoMapper.updateTransferResult(orderInfo);
        }
    }

    /**
     * 更新订单状态
     * @param vioMiOrderInfo
     * @return
     */
    public Integer updateOrderStatus(VioMiOrderInfo vioMiOrderInfo) {
        return orderInfoMapper.updateOrderStatus(vioMiOrderInfo);
    }

    public VioMiOrderInfo getOrderStatusByOrderId(Long orderId) {
        return orderInfoMapper.getOrderStatusByOrderId(orderId);
    }

    /**
     * 根据云米工单编码查询工单信息
     * @param orderNumber
     * @return
     */
    public VioMiOrderInfo getOrderByOrderNumber(String orderNumber) {
        return orderInfoMapper.getOrderByOrderNumber(orderNumber);
    }

    public String getOrderNumberByKklOrderId(Long kklOrderId) {
        return orderInfoMapper.getOrderNumberByKklOrderId(kklOrderId);
    }
}
